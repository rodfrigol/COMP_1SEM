// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/05/2020 14:00:45"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    q53final
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module q53final_vlg_sample_tst(
	A1,
	A2,
	A3,
	A4,
	A5,
	A6,
	A7,
	A8,
	B1,
	B2,
	B3,
	B4,
	B5,
	B6,
	B7,
	B8,
	Cin,
	M,
	S0,
	S1,
	sampler_tx
);
input  A1;
input  A2;
input  A3;
input  A4;
input  A5;
input  A6;
input  A7;
input  A8;
input  B1;
input  B2;
input  B3;
input  B4;
input  B5;
input  B6;
input  B7;
input  B8;
input  Cin;
input  M;
input  S0;
input  S1;
output sampler_tx;

reg sample;
time current_time;
always @(A1 or A2 or A3 or A4 or A5 or A6 or A7 or A8 or B1 or B2 or B3 or B4 or B5 or B6 or B7 or B8 or Cin or M or S0 or S1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module q53final_vlg_check_tst (
	Cout,
	F1,
	F2,
	F3,
	F4,
	F5,
	F6,
	F7,
	F8,
	sampler_rx
);
input  Cout;
input  F1;
input  F2;
input  F3;
input  F4;
input  F5;
input  F6;
input  F7;
input  F8;
input sampler_rx;

reg  Cout_expected;
reg  F1_expected;
reg  F2_expected;
reg  F3_expected;
reg  F4_expected;
reg  F5_expected;
reg  F6_expected;
reg  F7_expected;
reg  F8_expected;

reg  Cout_prev;
reg  F1_prev;
reg  F2_prev;
reg  F3_prev;
reg  F4_prev;
reg  F5_prev;
reg  F6_prev;
reg  F7_prev;
reg  F8_prev;

reg  Cout_expected_prev;
reg  F1_expected_prev;
reg  F2_expected_prev;
reg  F3_expected_prev;
reg  F4_expected_prev;
reg  F5_expected_prev;
reg  F6_expected_prev;
reg  F7_expected_prev;
reg  F8_expected_prev;

reg  last_Cout_exp;
reg  last_F1_exp;
reg  last_F2_exp;
reg  last_F3_exp;
reg  last_F4_exp;
reg  last_F5_exp;
reg  last_F6_exp;
reg  last_F7_exp;
reg  last_F8_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:9] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 9'b1;
end

// update real /o prevs

always @(trigger)
begin
	Cout_prev = Cout;
	F1_prev = F1;
	F2_prev = F2;
	F3_prev = F3;
	F4_prev = F4;
	F5_prev = F5;
	F6_prev = F6;
	F7_prev = F7;
	F8_prev = F8;
end

// update expected /o prevs

always @(trigger)
begin
	Cout_expected_prev = Cout_expected;
	F1_expected_prev = F1_expected;
	F2_expected_prev = F2_expected;
	F3_expected_prev = F3_expected;
	F4_expected_prev = F4_expected;
	F5_expected_prev = F5_expected;
	F6_expected_prev = F6_expected;
	F7_expected_prev = F7_expected;
	F8_expected_prev = F8_expected;
end



// expected Cout
initial
begin
	Cout_expected = 1'bX;
end 

// expected F8
initial
begin
	F8_expected = 1'bX;
	F8_expected = #1999000 1'b0;
	F8_expected = #6001000 1'bX;
end 

// expected F7
initial
begin
	F7_expected = 1'bX;
	F7_expected = #1999000 1'b0;
	F7_expected = #6001000 1'bX;
end 

// expected F6
initial
begin
	F6_expected = 1'bX;
	F6_expected = #1999000 1'b0;
	F6_expected = #6001000 1'bX;
end 

// expected F5
initial
begin
	F5_expected = 1'bX;
	F5_expected = #1999000 1'b0;
	F5_expected = #6001000 1'bX;
end 

// expected F4
initial
begin
	F4_expected = 1'bX;
	F4_expected = #1999000 1'b0;
	F4_expected = #6001000 1'bX;
end 

// expected F3
initial
begin
	F3_expected = 1'bX;
	F3_expected = #1999000 1'b0;
	F3_expected = #6001000 1'bX;
end 

// expected F2
initial
begin
	F2_expected = 1'bX;
	F2_expected = #1999000 1'b0;
	F2_expected = #6001000 1'bX;
end 

// expected F1
initial
begin
	F1_expected = 1'bX;
	F1_expected = #1999000 1'b0;
	F1_expected = #6001000 1'bX;
end 
// generate trigger
always @(Cout_expected or Cout or F1_expected or F1 or F2_expected or F2 or F3_expected or F3 or F4_expected or F4 or F5_expected or F5 or F6_expected or F6 or F7_expected or F7 or F8_expected or F8)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected Cout = %b | expected F1 = %b | expected F2 = %b | expected F3 = %b | expected F4 = %b | expected F5 = %b | expected F6 = %b | expected F7 = %b | expected F8 = %b | ",Cout_expected_prev,F1_expected_prev,F2_expected_prev,F3_expected_prev,F4_expected_prev,F5_expected_prev,F6_expected_prev,F7_expected_prev,F8_expected_prev);
	$display("| real Cout = %b | real F1 = %b | real F2 = %b | real F3 = %b | real F4 = %b | real F5 = %b | real F6 = %b | real F7 = %b | real F8 = %b | ",Cout_prev,F1_prev,F2_prev,F3_prev,F4_prev,F5_prev,F6_prev,F7_prev,F8_prev);
`endif
	if (
		( Cout_expected_prev !== 1'bx ) && ( Cout_prev !== Cout_expected_prev )
		&& ((Cout_expected_prev !== last_Cout_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Cout :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Cout_expected_prev);
		$display ("     Real value = %b", Cout_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_Cout_exp = Cout_expected_prev;
	end
	if (
		( F1_expected_prev !== 1'bx ) && ( F1_prev !== F1_expected_prev )
		&& ((F1_expected_prev !== last_F1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F1_expected_prev);
		$display ("     Real value = %b", F1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_F1_exp = F1_expected_prev;
	end
	if (
		( F2_expected_prev !== 1'bx ) && ( F2_prev !== F2_expected_prev )
		&& ((F2_expected_prev !== last_F2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F2_expected_prev);
		$display ("     Real value = %b", F2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_F2_exp = F2_expected_prev;
	end
	if (
		( F3_expected_prev !== 1'bx ) && ( F3_prev !== F3_expected_prev )
		&& ((F3_expected_prev !== last_F3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F3_expected_prev);
		$display ("     Real value = %b", F3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_F3_exp = F3_expected_prev;
	end
	if (
		( F4_expected_prev !== 1'bx ) && ( F4_prev !== F4_expected_prev )
		&& ((F4_expected_prev !== last_F4_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F4_expected_prev);
		$display ("     Real value = %b", F4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_F4_exp = F4_expected_prev;
	end
	if (
		( F5_expected_prev !== 1'bx ) && ( F5_prev !== F5_expected_prev )
		&& ((F5_expected_prev !== last_F5_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F5_expected_prev);
		$display ("     Real value = %b", F5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_F5_exp = F5_expected_prev;
	end
	if (
		( F6_expected_prev !== 1'bx ) && ( F6_prev !== F6_expected_prev )
		&& ((F6_expected_prev !== last_F6_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F6_expected_prev);
		$display ("     Real value = %b", F6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_F6_exp = F6_expected_prev;
	end
	if (
		( F7_expected_prev !== 1'bx ) && ( F7_prev !== F7_expected_prev )
		&& ((F7_expected_prev !== last_F7_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F7_expected_prev);
		$display ("     Real value = %b", F7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_F7_exp = F7_expected_prev;
	end
	if (
		( F8_expected_prev !== 1'bx ) && ( F8_prev !== F8_expected_prev )
		&& ((F8_expected_prev !== last_F8_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port F8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", F8_expected_prev);
		$display ("     Real value = %b", F8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_F8_exp = F8_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#8500000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module q53final_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A1;
reg A2;
reg A3;
reg A4;
reg A5;
reg A6;
reg A7;
reg A8;
reg B1;
reg B2;
reg B3;
reg B4;
reg B5;
reg B6;
reg B7;
reg B8;
reg Cin;
reg M;
reg S0;
reg S1;
// wires                                               
wire Cout;
wire F1;
wire F2;
wire F3;
wire F4;
wire F5;
wire F6;
wire F7;
wire F8;

wire sampler;                             

// assign statements (if any)                          
q53final i1 (
// port map - connection between master ports and signals/registers   
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.A5(A5),
	.A6(A6),
	.A7(A7),
	.A8(A8),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.B5(B5),
	.B6(B6),
	.B7(B7),
	.B8(B8),
	.Cin(Cin),
	.Cout(Cout),
	.F1(F1),
	.F2(F2),
	.F3(F3),
	.F4(F4),
	.F5(F5),
	.F6(F6),
	.F7(F7),
	.F8(F8),
	.M(M),
	.S0(S0),
	.S1(S1)
);

// M
initial
begin
	M = 1'bX;
	M = #500000 1'b0;
	M = #2000000 1'b1;
	M = #5500000 1'bX;
end 

// S1
initial
begin
	S1 = 1'bX;
	S1 = #500000 1'b1;
	S1 = #1000000 1'b0;
	S1 = #3000000 1'b1;
	S1 = #3500000 1'bX;
end 

// S0
initial
begin
	S0 = 1'bX;
	S0 = #500000 1'b0;
	S0 = #1000000 1'b1;
	S0 = #2000000 1'b0;
	S0 = #2500000 1'b1;
	S0 = #2000000 1'bX;
end 

// Cin
initial
begin
	Cin = 1'bX;
	Cin = #500000 1'b0;
	Cin = #1000000 1'b1;
	Cin = #3000000 1'b0;
	Cin = #1500000 1'b1;
	Cin = #2000000 1'b0;
end 

// B8
initial
begin
	B8 = 1'bX;
	B8 = #500000 1'b0;
	B8 = #1000000 1'bX;
	B8 = #3000000 1'b0;
	B8 = #500000 1'b1;
	B8 = #1000000 1'b0;
	B8 = #1000000 1'b1;
	B8 = #500000 1'b0;
	B8 = #500000 1'bX;
end 

// B7
initial
begin
	B7 = 1'bX;
	B7 = #500000 1'b0;
	B7 = #500000 1'b1;
	B7 = #500000 1'bX;
	B7 = #3000000 1'b0;
	B7 = #1000000 1'b1;
	B7 = #1000000 1'b0;
	B7 = #1500000 1'bX;
end 

// B6
initial
begin
	B6 = 1'bX;
	B6 = #500000 1'b1;
	B6 = #500000 1'b0;
	B6 = #500000 1'bX;
	B6 = #3000000 1'b1;
	B6 = #500000 1'b0;
	B6 = #500000 1'b1;
	B6 = #1000000 1'b0;
	B6 = #500000 1'b1;
	B6 = #500000 1'b0;
	B6 = #500000 1'bX;
end 

// B5
initial
begin
	B5 = 1'bX;
	B5 = #500000 1'b0;
	B5 = #500000 1'b1;
	B5 = #500000 1'bX;
	B5 = #3000000 1'b1;
	B5 = #500000 1'b0;
	B5 = #500000 1'b1;
	B5 = #500000 1'b0;
	B5 = #1000000 1'b1;
	B5 = #500000 1'b0;
	B5 = #500000 1'bX;
end 

// B4
initial
begin
	B4 = 1'bX;
	B4 = #500000 1'b0;
	B4 = #500000 1'b1;
	B4 = #500000 1'bX;
	B4 = #3000000 1'b1;
	B4 = #500000 1'b0;
	B4 = #500000 1'b1;
	B4 = #500000 1'b0;
	B4 = #1000000 1'b1;
	B4 = #500000 1'b0;
	B4 = #500000 1'bX;
end 

// B3
initial
begin
	B3 = 1'bX;
	B3 = #500000 1'b1;
	B3 = #500000 1'b0;
	B3 = #500000 1'bX;
	B3 = #3000000 1'b1;
	B3 = #500000 1'b0;
	B3 = #500000 1'b1;
	B3 = #1000000 1'b0;
	B3 = #500000 1'b1;
	B3 = #500000 1'b0;
	B3 = #500000 1'bX;
end 

// B2
initial
begin
	B2 = 1'bX;
	B2 = #500000 1'b1;
	B2 = #1000000 1'bX;
	B2 = #3000000 1'b0;
	B2 = #500000 1'b1;
	B2 = #1000000 1'b0;
	B2 = #2000000 1'bX;
end 

// B1
initial
begin
	B1 = 1'bX;
	B1 = #500000 1'b1;
	B1 = #500000 1'b0;
	B1 = #500000 1'bX;
	B1 = #3000000 1'b0;
	B1 = #2000000 1'b1;
	B1 = #500000 1'b0;
	B1 = #1000000 1'bX;
end 

// A8
initial
begin
	A8 = 1'bX;
	A8 = #500000 1'b0;
	A8 = #500000 1'b1;
	A8 = #500000 1'b0;
	A8 = #500000 1'b1;
	A8 = #2500000 1'b0;
	A8 = #500000 1'b1;
	A8 = #500000 1'b0;
	A8 = #1500000 1'b1;
	A8 = #1000000 1'bX;
end 

// A7
initial
begin
	A7 = 1'bX;
	A7 = #500000 1'b1;
	A7 = #1000000 1'b0;
	A7 = #1000000 1'b1;
	A7 = #500000 1'b0;
	A7 = #1000000 1'b1;
	A7 = #1000000 1'b0;
	A7 = #1500000 1'b1;
	A7 = #500000 1'b0;
	A7 = #500000 1'b1;
	A7 = #500000 1'bX;
end 

// A6
initial
begin
	A6 = 1'bX;
	A6 = #500000 1'b1;
	A6 = #500000 1'b0;
	A6 = #500000 1'b1;
	A6 = #500000 1'b0;
	A6 = #2000000 1'b1;
	A6 = #1500000 1'b0;
	A6 = #1000000 1'b1;
	A6 = #1500000 1'bX;
end 

// A5
initial
begin
	A5 = 1'bX;
	A5 = #500000 1'b0;
	A5 = #500000 1'b1;
	A5 = #1000000 1'b0;
	A5 = #1500000 1'b1;
	A5 = #1500000 1'b0;
	A5 = #2000000 1'b1;
	A5 = #1000000 1'bX;
end 

// A4
initial
begin
	A4 = 1'bX;
	A4 = #500000 1'b0;
	A4 = #1000000 1'b1;
	A4 = #500000 1'b0;
	A4 = #2000000 1'b1;
	A4 = #1500000 1'b0;
	A4 = #1500000 1'b1;
	A4 = #500000 1'b0;
	A4 = #500000 1'bX;
end 

// A3
initial
begin
	A3 = 1'bX;
	A3 = #500000 1'b1;
	A3 = #500000 1'b0;
	A3 = #500000 1'b1;
	A3 = #500000 1'b0;
	A3 = #500000 1'b1;
	A3 = #500000 1'b0;
	A3 = #1000000 1'b1;
	A3 = #500000 1'b0;
	A3 = #2000000 1'b1;
	A3 = #1000000 1'b0;
	A3 = #500000 1'bX;
end 

// A2
initial
begin
	A2 = 1'bX;
	A2 = #500000 1'b0;
	A2 = #500000 1'b1;
	A2 = #500000 1'b0;
	A2 = #500000 1'b1;
	A2 = #1500000 1'b0;
	A2 = #500000 1'b1;
	A2 = #500000 1'b0;
	A2 = #500000 1'b1;
	A2 = #1000000 1'b0;
	A2 = #2000000 1'bX;
end 

// A1
initial
begin
	A1 = 1'bX;
	A1 = #500000 1'b0;
	A1 = #2000000 1'b1;
	A1 = #500000 1'b0;
	A1 = #500000 1'b1;
	A1 = #1500000 1'b0;
	A1 = #500000 1'b1;
	A1 = #1000000 1'b0;
	A1 = #1500000 1'bX;
end 

q53final_vlg_sample_tst tb_sample (
	.A1(A1),
	.A2(A2),
	.A3(A3),
	.A4(A4),
	.A5(A5),
	.A6(A6),
	.A7(A7),
	.A8(A8),
	.B1(B1),
	.B2(B2),
	.B3(B3),
	.B4(B4),
	.B5(B5),
	.B6(B6),
	.B7(B7),
	.B8(B8),
	.Cin(Cin),
	.M(M),
	.S0(S0),
	.S1(S1),
	.sampler_tx(sampler)
);

q53final_vlg_check_tst tb_out(
	.Cout(Cout),
	.F1(F1),
	.F2(F2),
	.F3(F3),
	.F4(F4),
	.F5(F5),
	.F6(F6),
	.F7(F7),
	.F8(F8),
	.sampler_rx(sampler)
);
endmodule

