// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"

// DATE "06/10/2020 04:12:54"

// 
// Device: Altera EP4CE6E22C8 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module q62 (
	C0,
	A0,
	B0,
	M1,
	A1,
	B1,
	M2,
	M3);
output 	C0;
input 	A0;
input 	B0;
output 	M1;
input 	A1;
input 	B1;
output 	M2;
output 	M3;

// Design Ports Information
// C0	=>  Location: PIN_7,	 I/O Standard: 2.5 V,	 Current Strength: Default
// M1	=>  Location: PIN_126,	 I/O Standard: 2.5 V,	 Current Strength: Default
// M2	=>  Location: PIN_3,	 I/O Standard: 2.5 V,	 Current Strength: Default
// M3	=>  Location: PIN_1,	 I/O Standard: 2.5 V,	 Current Strength: Default
// A0	=>  Location: PIN_24,	 I/O Standard: 2.5 V,	 Current Strength: Default
// B0	=>  Location: PIN_25,	 I/O Standard: 2.5 V,	 Current Strength: Default
// A1	=>  Location: PIN_11,	 I/O Standard: 2.5 V,	 Current Strength: Default
// B1	=>  Location: PIN_10,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \C0~output_o ;
wire \M1~output_o ;
wire \M2~output_o ;
wire \M3~output_o ;
wire \A0~input_o ;
wire \B0~input_o ;
wire \inst~0_combout ;
wire \B1~input_o ;
wire \A1~input_o ;
wire \inst4~combout ;
wire \inst6~0_combout ;
wire \inst8~0_combout ;


// Location: IOOBUF_X0_Y21_N9
cycloneive_io_obuf \C0~output (
	.i(\inst~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\C0~output_o ),
	.obar());
// synopsys translate_off
defparam \C0~output .bus_hold = "false";
defparam \C0~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X16_Y24_N2
cycloneive_io_obuf \M1~output (
	.i(\inst4~combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\M1~output_o ),
	.obar());
// synopsys translate_off
defparam \M1~output .bus_hold = "false";
defparam \M1~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y23_N16
cycloneive_io_obuf \M2~output (
	.i(\inst6~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\M2~output_o ),
	.obar());
// synopsys translate_off
defparam \M2~output .bus_hold = "false";
defparam \M2~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOOBUF_X0_Y23_N2
cycloneive_io_obuf \M3~output (
	.i(\inst8~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\M3~output_o ),
	.obar());
// synopsys translate_off
defparam \M3~output .bus_hold = "false";
defparam \M3~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X0_Y11_N15
cycloneive_io_ibuf \A0~input (
	.i(A0),
	.ibar(gnd),
	.o(\A0~input_o ));
// synopsys translate_off
defparam \A0~input .bus_hold = "false";
defparam \A0~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y11_N22
cycloneive_io_ibuf \B0~input (
	.i(B0),
	.ibar(gnd),
	.o(\B0~input_o ));
// synopsys translate_off
defparam \B0~input .bus_hold = "false";
defparam \B0~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X1_Y18_N16
cycloneive_lcell_comb \inst~0 (
// Equation(s):
// \inst~0_combout  = (\A0~input_o  & \B0~input_o )

	.dataa(\A0~input_o ),
	.datab(gnd),
	.datac(\B0~input_o ),
	.datad(gnd),
	.cin(gnd),
	.combout(\inst~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst~0 .lut_mask = 16'hA0A0;
defparam \inst~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: IOIBUF_X0_Y18_N15
cycloneive_io_ibuf \B1~input (
	.i(B1),
	.ibar(gnd),
	.o(\B1~input_o ));
// synopsys translate_off
defparam \B1~input .bus_hold = "false";
defparam \B1~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X0_Y18_N22
cycloneive_io_ibuf \A1~input (
	.i(A1),
	.ibar(gnd),
	.o(\A1~input_o ));
// synopsys translate_off
defparam \A1~input .bus_hold = "false";
defparam \A1~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X1_Y18_N2
cycloneive_lcell_comb inst4(
// Equation(s):
// \inst4~combout  = (\A0~input_o  & (\B1~input_o  $ (((\B0~input_o  & \A1~input_o ))))) # (!\A0~input_o  & (((\B0~input_o  & \A1~input_o ))))

	.dataa(\A0~input_o ),
	.datab(\B1~input_o ),
	.datac(\B0~input_o ),
	.datad(\A1~input_o ),
	.cin(gnd),
	.combout(\inst4~combout ),
	.cout());
// synopsys translate_off
defparam inst4.lut_mask = 16'h7888;
defparam inst4.sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X1_Y18_N12
cycloneive_lcell_comb \inst6~0 (
// Equation(s):
// \inst6~0_combout  = (\B1~input_o  & (\A1~input_o  & ((!\B0~input_o ) # (!\A0~input_o ))))

	.dataa(\A0~input_o ),
	.datab(\B1~input_o ),
	.datac(\B0~input_o ),
	.datad(\A1~input_o ),
	.cin(gnd),
	.combout(\inst6~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst6~0 .lut_mask = 16'h4C00;
defparam \inst6~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: LCCOMB_X1_Y18_N14
cycloneive_lcell_comb \inst8~0 (
// Equation(s):
// \inst8~0_combout  = (\A0~input_o  & (\B1~input_o  & (\B0~input_o  & \A1~input_o )))

	.dataa(\A0~input_o ),
	.datab(\B1~input_o ),
	.datac(\B0~input_o ),
	.datad(\A1~input_o ),
	.cin(gnd),
	.combout(\inst8~0_combout ),
	.cout());
// synopsys translate_off
defparam \inst8~0 .lut_mask = 16'h8000;
defparam \inst8~0 .sum_lutc_input = "datac";
// synopsys translate_on

assign C0 = \C0~output_o ;

assign M1 = \M1~output_o ;

assign M2 = \M2~output_o ;

assign M3 = \M3~output_o ;

endmodule
